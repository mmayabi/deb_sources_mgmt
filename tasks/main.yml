---
- name: "Checking system OS"
  ansible.builtin.fail:
    msg: "This is not a Debian based distribution"
  when: ansible_os_family != "Debian"

- name: "Install python-apt"
  ansible.builtin.apt:
    name: python-apt
    state: present
  when: ansible_distribution == "Debian"

- name: "Installing empty sources.list"
  ansible.builtin.copy:
    src: sources.list
    dest: /etc/apt/sources.list
    mode: 0444
    owner: root
    group: root
    backup: yes

- name: "Cleaning distribution included repositories lists"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ deb__distro_sources }}"
  when: deb__clean_sources == "distribution"

- name: "Listing existing repositories lists"
  ansible.builtin.find:
    path: /etc/apt/sources.list.d/
    file_type: file
    patterns: "*.list"
    recurse: true
  when: deb__clean_sources == "all"
  register: sourcesd_files

- name: "Cleaning all existing repositories lists"
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items:
    - "{{ sourcesd_files.files }}"
  when: deb__clean_sources == "all"

- name: Add apt proxy configuration
  ansible.builtin.copy:
    src: apt.conf
    dest: /etc/apt/apt.conf
    mode: 0644
    owner: root
    group: root
    backup: yes
  when: set_apt_proxy

- name: Add repositories
  ansible.builtin.template:
    src: sourcesRepo.list.j2
    dest: /etc/apt/sources.list.d/{{ ansible_distribution_release }}.list
    mode: 0644
    owner: root
    group: root
  notify: Update cache

- name: Add um repositories
  ansible.builtin.template:
    src: umRepo.list.j2
    dest: /etc/apt/sources.list.d/{{ ansible_distribution_release }}_um.list
    mode: 0644
    owner: root
    group: root
  when: um_repos
  notify: Update cache

- meta: flush_handlers
